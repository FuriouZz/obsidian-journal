/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/views/journal-view.tsx
var import_obsidian2 = require("obsidian");

// node_modules/.pnpm/preact@10.13.2/node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var i;
var t;
var r;
var o;
var f;
var e;
var c = {};
var s = [];
var a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function h(n2, l3) {
  for (var u3 in l3)
    n2[u3] = l3[u3];
  return n2;
}
function v(n2) {
  var l3 = n2.parentNode;
  l3 && l3.removeChild(n2);
}
function y(l3, u3, i3) {
  var t3, r3, o4, f3 = {};
  for (o4 in u3)
    "key" == o4 ? t3 = u3[o4] : "ref" == o4 ? r3 = u3[o4] : f3[o4] = u3[o4];
  if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : i3), "function" == typeof l3 && null != l3.defaultProps)
    for (o4 in l3.defaultProps)
      void 0 === f3[o4] && (f3[o4] = l3.defaultProps[o4]);
  return p(l3, f3, t3, r3, null);
}
function p(n2, i3, t3, r3, o4) {
  var f3 = { type: n2, props: i3, key: t3, ref: r3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: null == o4 ? ++u : o4 };
  return null == o4 && null != l.vnode && l.vnode(f3), f3;
}
function _(n2) {
  return n2.children;
}
function k(n2, l3) {
  this.props = n2, this.context = l3;
}
function b(n2, l3) {
  if (null == l3)
    return n2.__ ? b(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
  for (var u3; l3 < n2.__k.length; l3++)
    if (null != (u3 = n2.__k[l3]) && null != u3.__e)
      return u3.__e;
  return "function" == typeof n2.type ? b(n2) : null;
}
function g(n2) {
  var l3, u3;
  if (null != (n2 = n2.__) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++)
      if (null != (u3 = n2.__k[l3]) && null != u3.__e) {
        n2.__e = n2.__c.base = u3.__e;
        break;
      }
    return g(n2);
  }
}
function m(n2) {
  (!n2.__d && (n2.__d = true) && t.push(n2) && !w.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)(w);
}
function w() {
  var n2, l3, u3, i3, r3, o4, e3, c3;
  for (t.sort(f); n2 = t.shift(); )
    n2.__d && (l3 = t.length, i3 = void 0, r3 = void 0, e3 = (o4 = (u3 = n2).__v).__e, (c3 = u3.__P) && (i3 = [], (r3 = h({}, o4)).__v = o4.__v + 1, L(c3, o4, r3, u3.__n, void 0 !== c3.ownerSVGElement, null != o4.__h ? [e3] : null, i3, null == e3 ? b(o4) : e3, o4.__h), M(i3, o4), o4.__e != e3 && g(o4)), t.length > l3 && t.sort(f));
  w.__r = 0;
}
function x(n2, l3, u3, i3, t3, r3, o4, f3, e3, a3) {
  var h2, v3, y2, d2, k3, g3, m3, w3 = i3 && i3.__k || s, x2 = w3.length;
  for (u3.__k = [], h2 = 0; h2 < l3.length; h2++)
    if (null != (d2 = u3.__k[h2] = null == (d2 = l3[h2]) || "boolean" == typeof d2 || "function" == typeof d2 ? null : "string" == typeof d2 || "number" == typeof d2 || "bigint" == typeof d2 ? p(null, d2, null, null, d2) : Array.isArray(d2) ? p(_, { children: d2 }, null, null, null) : d2.__b > 0 ? p(d2.type, d2.props, d2.key, d2.ref ? d2.ref : null, d2.__v) : d2)) {
      if (d2.__ = u3, d2.__b = u3.__b + 1, null === (y2 = w3[h2]) || y2 && d2.key == y2.key && d2.type === y2.type)
        w3[h2] = void 0;
      else
        for (v3 = 0; v3 < x2; v3++) {
          if ((y2 = w3[v3]) && d2.key == y2.key && d2.type === y2.type) {
            w3[v3] = void 0;
            break;
          }
          y2 = null;
        }
      L(n2, d2, y2 = y2 || c, t3, r3, o4, f3, e3, a3), k3 = d2.__e, (v3 = d2.ref) && y2.ref != v3 && (m3 || (m3 = []), y2.ref && m3.push(y2.ref, null, d2), m3.push(v3, d2.__c || k3, d2)), null != k3 ? (null == g3 && (g3 = k3), "function" == typeof d2.type && d2.__k === y2.__k ? d2.__d = e3 = A(d2, e3, n2) : e3 = C(n2, d2, y2, w3, k3, e3), "function" == typeof u3.type && (u3.__d = e3)) : e3 && y2.__e == e3 && e3.parentNode != n2 && (e3 = b(y2));
    }
  for (u3.__e = g3, h2 = x2; h2--; )
    null != w3[h2] && ("function" == typeof u3.type && null != w3[h2].__e && w3[h2].__e == u3.__d && (u3.__d = $(i3).nextSibling), S(w3[h2], w3[h2]));
  if (m3)
    for (h2 = 0; h2 < m3.length; h2++)
      O(m3[h2], m3[++h2], m3[++h2]);
}
function A(n2, l3, u3) {
  for (var i3, t3 = n2.__k, r3 = 0; t3 && r3 < t3.length; r3++)
    (i3 = t3[r3]) && (i3.__ = n2, l3 = "function" == typeof i3.type ? A(i3, l3, u3) : C(u3, i3, i3, t3, i3.__e, l3));
  return l3;
}
function C(n2, l3, u3, i3, t3, r3) {
  var o4, f3, e3;
  if (void 0 !== l3.__d)
    o4 = l3.__d, l3.__d = void 0;
  else if (null == u3 || t3 != r3 || null == t3.parentNode)
    n:
      if (null == r3 || r3.parentNode !== n2)
        n2.appendChild(t3), o4 = null;
      else {
        for (f3 = r3, e3 = 0; (f3 = f3.nextSibling) && e3 < i3.length; e3 += 1)
          if (f3 == t3)
            break n;
        n2.insertBefore(t3, r3), o4 = r3;
      }
  return void 0 !== o4 ? o4 : t3.nextSibling;
}
function $(n2) {
  var l3, u3, i3;
  if (null == n2.type || "string" == typeof n2.type)
    return n2.__e;
  if (n2.__k) {
    for (l3 = n2.__k.length - 1; l3 >= 0; l3--)
      if ((u3 = n2.__k[l3]) && (i3 = $(u3)))
        return i3;
  }
  return null;
}
function H(n2, l3, u3, i3, t3) {
  var r3;
  for (r3 in u3)
    "children" === r3 || "key" === r3 || r3 in l3 || T(n2, r3, null, u3[r3], i3);
  for (r3 in l3)
    t3 && "function" != typeof l3[r3] || "children" === r3 || "key" === r3 || "value" === r3 || "checked" === r3 || u3[r3] === l3[r3] || T(n2, r3, l3[r3], u3[r3], i3);
}
function I(n2, l3, u3) {
  "-" === l3[0] ? n2.setProperty(l3, null == u3 ? "" : u3) : n2[l3] = null == u3 ? "" : "number" != typeof u3 || a.test(l3) ? u3 : u3 + "px";
}
function T(n2, l3, u3, i3, t3) {
  var r3;
  n:
    if ("style" === l3)
      if ("string" == typeof u3)
        n2.style.cssText = u3;
      else {
        if ("string" == typeof i3 && (n2.style.cssText = i3 = ""), i3)
          for (l3 in i3)
            u3 && l3 in u3 || I(n2.style, l3, "");
        if (u3)
          for (l3 in u3)
            i3 && u3[l3] === i3[l3] || I(n2.style, l3, u3[l3]);
      }
    else if ("o" === l3[0] && "n" === l3[1])
      r3 = l3 !== (l3 = l3.replace(/Capture$/, "")), l3 = l3.toLowerCase() in n2 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + r3] = u3, u3 ? i3 || n2.addEventListener(l3, r3 ? z : j, r3) : n2.removeEventListener(l3, r3 ? z : j, r3);
    else if ("dangerouslySetInnerHTML" !== l3) {
      if (t3)
        l3 = l3.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" !== l3 && "height" !== l3 && "href" !== l3 && "list" !== l3 && "form" !== l3 && "tabIndex" !== l3 && "download" !== l3 && l3 in n2)
        try {
          n2[l3] = null == u3 ? "" : u3;
          break n;
        } catch (n3) {
        }
      "function" == typeof u3 || (null == u3 || false === u3 && "-" !== l3[4] ? n2.removeAttribute(l3) : n2.setAttribute(l3, u3));
    }
}
function j(n2) {
  return this.l[n2.type + false](l.event ? l.event(n2) : n2);
}
function z(n2) {
  return this.l[n2.type + true](l.event ? l.event(n2) : n2);
}
function L(n2, u3, i3, t3, r3, o4, f3, e3, c3) {
  var s2, a3, v3, y2, p3, d2, b3, g3, m3, w3, A2, P, C2, $2, H2, I2 = u3.type;
  if (void 0 !== u3.constructor)
    return null;
  null != i3.__h && (c3 = i3.__h, e3 = u3.__e = i3.__e, u3.__h = null, o4 = [e3]), (s2 = l.__b) && s2(u3);
  try {
    n:
      if ("function" == typeof I2) {
        if (g3 = u3.props, m3 = (s2 = I2.contextType) && t3[s2.__c], w3 = s2 ? m3 ? m3.props.value : s2.__ : t3, i3.__c ? b3 = (a3 = u3.__c = i3.__c).__ = a3.__E : ("prototype" in I2 && I2.prototype.render ? u3.__c = a3 = new I2(g3, w3) : (u3.__c = a3 = new k(g3, w3), a3.constructor = I2, a3.render = q), m3 && m3.sub(a3), a3.props = g3, a3.state || (a3.state = {}), a3.context = w3, a3.__n = t3, v3 = a3.__d = true, a3.__h = [], a3._sb = []), null == a3.__s && (a3.__s = a3.state), null != I2.getDerivedStateFromProps && (a3.__s == a3.state && (a3.__s = h({}, a3.__s)), h(a3.__s, I2.getDerivedStateFromProps(g3, a3.__s))), y2 = a3.props, p3 = a3.state, a3.__v = u3, v3)
          null == I2.getDerivedStateFromProps && null != a3.componentWillMount && a3.componentWillMount(), null != a3.componentDidMount && a3.__h.push(a3.componentDidMount);
        else {
          if (null == I2.getDerivedStateFromProps && g3 !== y2 && null != a3.componentWillReceiveProps && a3.componentWillReceiveProps(g3, w3), !a3.__e && null != a3.shouldComponentUpdate && false === a3.shouldComponentUpdate(g3, a3.__s, w3) || u3.__v === i3.__v) {
            for (u3.__v !== i3.__v && (a3.props = g3, a3.state = a3.__s, a3.__d = false), a3.__e = false, u3.__e = i3.__e, u3.__k = i3.__k, u3.__k.forEach(function(n3) {
              n3 && (n3.__ = u3);
            }), A2 = 0; A2 < a3._sb.length; A2++)
              a3.__h.push(a3._sb[A2]);
            a3._sb = [], a3.__h.length && f3.push(a3);
            break n;
          }
          null != a3.componentWillUpdate && a3.componentWillUpdate(g3, a3.__s, w3), null != a3.componentDidUpdate && a3.__h.push(function() {
            a3.componentDidUpdate(y2, p3, d2);
          });
        }
        if (a3.context = w3, a3.props = g3, a3.__P = n2, P = l.__r, C2 = 0, "prototype" in I2 && I2.prototype.render) {
          for (a3.state = a3.__s, a3.__d = false, P && P(u3), s2 = a3.render(a3.props, a3.state, a3.context), $2 = 0; $2 < a3._sb.length; $2++)
            a3.__h.push(a3._sb[$2]);
          a3._sb = [];
        } else
          do {
            a3.__d = false, P && P(u3), s2 = a3.render(a3.props, a3.state, a3.context), a3.state = a3.__s;
          } while (a3.__d && ++C2 < 25);
        a3.state = a3.__s, null != a3.getChildContext && (t3 = h(h({}, t3), a3.getChildContext())), v3 || null == a3.getSnapshotBeforeUpdate || (d2 = a3.getSnapshotBeforeUpdate(y2, p3)), H2 = null != s2 && s2.type === _ && null == s2.key ? s2.props.children : s2, x(n2, Array.isArray(H2) ? H2 : [H2], u3, i3, t3, r3, o4, f3, e3, c3), a3.base = u3.__e, u3.__h = null, a3.__h.length && f3.push(a3), b3 && (a3.__E = a3.__ = null), a3.__e = false;
      } else
        null == o4 && u3.__v === i3.__v ? (u3.__k = i3.__k, u3.__e = i3.__e) : u3.__e = N(i3.__e, u3, i3, t3, r3, o4, f3, c3);
    (s2 = l.diffed) && s2(u3);
  } catch (n3) {
    u3.__v = null, (c3 || null != o4) && (u3.__e = e3, u3.__h = !!c3, o4[o4.indexOf(e3)] = null), l.__e(n3, u3, i3);
  }
}
function M(n2, u3) {
  l.__c && l.__c(u3, n2), n2.some(function(u4) {
    try {
      n2 = u4.__h, u4.__h = [], n2.some(function(n3) {
        n3.call(u4);
      });
    } catch (n3) {
      l.__e(n3, u4.__v);
    }
  });
}
function N(l3, u3, i3, t3, r3, o4, f3, e3) {
  var s2, a3, h2, y2 = i3.props, p3 = u3.props, d2 = u3.type, _4 = 0;
  if ("svg" === d2 && (r3 = true), null != o4) {
    for (; _4 < o4.length; _4++)
      if ((s2 = o4[_4]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : 3 === s2.nodeType)) {
        l3 = s2, o4[_4] = null;
        break;
      }
  }
  if (null == l3) {
    if (null === d2)
      return document.createTextNode(p3);
    l3 = r3 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, p3.is && p3), o4 = null, e3 = false;
  }
  if (null === d2)
    y2 === p3 || e3 && l3.data === p3 || (l3.data = p3);
  else {
    if (o4 = o4 && n.call(l3.childNodes), a3 = (y2 = i3.props || c).dangerouslySetInnerHTML, h2 = p3.dangerouslySetInnerHTML, !e3) {
      if (null != o4)
        for (y2 = {}, _4 = 0; _4 < l3.attributes.length; _4++)
          y2[l3.attributes[_4].name] = l3.attributes[_4].value;
      (h2 || a3) && (h2 && (a3 && h2.__html == a3.__html || h2.__html === l3.innerHTML) || (l3.innerHTML = h2 && h2.__html || ""));
    }
    if (H(l3, p3, y2, r3, e3), h2)
      u3.__k = [];
    else if (_4 = u3.props.children, x(l3, Array.isArray(_4) ? _4 : [_4], u3, i3, t3, r3 && "foreignObject" !== d2, o4, f3, o4 ? o4[0] : i3.__k && b(i3, 0), e3), null != o4)
      for (_4 = o4.length; _4--; )
        null != o4[_4] && v(o4[_4]);
    e3 || ("value" in p3 && void 0 !== (_4 = p3.value) && (_4 !== l3.value || "progress" === d2 && !_4 || "option" === d2 && _4 !== y2.value) && T(l3, "value", _4, y2.value, false), "checked" in p3 && void 0 !== (_4 = p3.checked) && _4 !== l3.checked && T(l3, "checked", _4, y2.checked, false));
  }
  return l3;
}
function O(n2, u3, i3) {
  try {
    "function" == typeof n2 ? n2(u3) : n2.current = u3;
  } catch (n3) {
    l.__e(n3, i3);
  }
}
function S(n2, u3, i3) {
  var t3, r3;
  if (l.unmount && l.unmount(n2), (t3 = n2.ref) && (t3.current && t3.current !== n2.__e || O(t3, null, u3)), null != (t3 = n2.__c)) {
    if (t3.componentWillUnmount)
      try {
        t3.componentWillUnmount();
      } catch (n3) {
        l.__e(n3, u3);
      }
    t3.base = t3.__P = null, n2.__c = void 0;
  }
  if (t3 = n2.__k)
    for (r3 = 0; r3 < t3.length; r3++)
      t3[r3] && S(t3[r3], u3, i3 || "function" != typeof n2.type);
  i3 || null == n2.__e || v(n2.__e), n2.__ = n2.__e = n2.__d = void 0;
}
function q(n2, l3, u3) {
  return this.constructor(n2, u3);
}
function B(u3, i3, t3) {
  var r3, o4, f3;
  l.__ && l.__(u3, i3), o4 = (r3 = "function" == typeof t3) ? null : t3 && t3.__k || i3.__k, f3 = [], L(i3, u3 = (!r3 && t3 || i3).__k = y(_, null, [u3]), o4 || c, c, void 0 !== i3.ownerSVGElement, !r3 && t3 ? [t3] : o4 ? null : i3.firstChild ? n.call(i3.childNodes) : null, f3, !r3 && t3 ? t3 : o4 ? o4.__e : i3.firstChild, r3), M(f3, u3);
}
n = s.slice, l = { __e: function(n2, l3, u3, i3) {
  for (var t3, r3, o4; l3 = l3.__; )
    if ((t3 = l3.__c) && !t3.__)
      try {
        if ((r3 = t3.constructor) && null != r3.getDerivedStateFromError && (t3.setState(r3.getDerivedStateFromError(n2)), o4 = t3.__d), null != t3.componentDidCatch && (t3.componentDidCatch(n2, i3 || {}), o4 = t3.__d), o4)
          return t3.__E = t3;
      } catch (l4) {
        n2 = l4;
      }
  throw n2;
} }, u = 0, i = function(n2) {
  return null != n2 && void 0 === n2.constructor;
}, k.prototype.setState = function(n2, l3) {
  var u3;
  u3 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = h({}, this.state), "function" == typeof n2 && (n2 = n2(h({}, u3), this.props)), n2 && h(u3, n2), null != n2 && this.__v && (l3 && this._sb.push(l3), m(this));
}, k.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), m(this));
}, k.prototype.render = _, t = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n2, l3) {
  return n2.__v.__b - l3.__v.__b;
}, w.__r = 0, e = 0;

// node_modules/.pnpm/preact@10.13.2/node_modules/preact/hooks/dist/hooks.module.js
var t2;
var r2;
var u2;
var i2;
var o2 = 0;
var f2 = [];
var c2 = [];
var e2 = l.__b;
var a2 = l.__r;
var v2 = l.diffed;
var l2 = l.__c;
var m2 = l.unmount;
function d(t3, u3) {
  l.__h && l.__h(r2, t3, o2 || u3), o2 = 0;
  var i3 = r2.__H || (r2.__H = { __: [], __h: [] });
  return t3 >= i3.__.length && i3.__.push({ __V: c2 }), i3.__[t3];
}
function p2(u3, i3) {
  var o4 = d(t2++, 3);
  !l.__s && z2(o4.__H, i3) && (o4.__ = u3, o4.i = i3, r2.__H.__h.push(o4));
}
function _2(n2) {
  return o2 = 5, F(function() {
    return { current: n2 };
  }, []);
}
function F(n2, r3) {
  var u3 = d(t2++, 7);
  return z2(u3.__H, r3) ? (u3.__V = n2(), u3.i = r3, u3.__h = n2, u3.__V) : u3.__;
}
function b2() {
  for (var t3; t3 = f2.shift(); )
    if (t3.__P && t3.__H)
      try {
        t3.__H.__h.forEach(k2), t3.__H.__h.forEach(w2), t3.__H.__h = [];
      } catch (r3) {
        t3.__H.__h = [], l.__e(r3, t3.__v);
      }
}
l.__b = function(n2) {
  r2 = null, e2 && e2(n2);
}, l.__r = function(n2) {
  a2 && a2(n2), t2 = 0;
  var i3 = (r2 = n2.__c).__H;
  i3 && (u2 === r2 ? (i3.__h = [], r2.__h = [], i3.__.forEach(function(n3) {
    n3.__N && (n3.__ = n3.__N), n3.__V = c2, n3.__N = n3.i = void 0;
  })) : (i3.__h.forEach(k2), i3.__h.forEach(w2), i3.__h = [])), u2 = r2;
}, l.diffed = function(t3) {
  v2 && v2(t3);
  var o4 = t3.__c;
  o4 && o4.__H && (o4.__H.__h.length && (1 !== f2.push(o4) && i2 === l.requestAnimationFrame || ((i2 = l.requestAnimationFrame) || j2)(b2)), o4.__H.__.forEach(function(n2) {
    n2.i && (n2.__H = n2.i), n2.__V !== c2 && (n2.__ = n2.__V), n2.i = void 0, n2.__V = c2;
  })), u2 = r2 = null;
}, l.__c = function(t3, r3) {
  r3.some(function(t4) {
    try {
      t4.__h.forEach(k2), t4.__h = t4.__h.filter(function(n2) {
        return !n2.__ || w2(n2);
      });
    } catch (u3) {
      r3.some(function(n2) {
        n2.__h && (n2.__h = []);
      }), r3 = [], l.__e(u3, t4.__v);
    }
  }), l2 && l2(t3, r3);
}, l.unmount = function(t3) {
  m2 && m2(t3);
  var r3, u3 = t3.__c;
  u3 && u3.__H && (u3.__H.__.forEach(function(n2) {
    try {
      k2(n2);
    } catch (n3) {
      r3 = n3;
    }
  }), u3.__H = void 0, r3 && l.__e(r3, u3.__v));
};
var g2 = "function" == typeof requestAnimationFrame;
function j2(n2) {
  var t3, r3 = function() {
    clearTimeout(u3), g2 && cancelAnimationFrame(t3), setTimeout(n2);
  }, u3 = setTimeout(r3, 100);
  g2 && (t3 = requestAnimationFrame(r3));
}
function k2(n2) {
  var t3 = r2, u3 = n2.__c;
  "function" == typeof u3 && (n2.__c = void 0, u3()), r2 = t3;
}
function w2(n2) {
  var t3 = r2;
  n2.__c = n2.__(), r2 = t3;
}
function z2(n2, t3) {
  return !n2 || n2.length !== t3.length || t3.some(function(t4, r3) {
    return t4 !== n2[r3];
  });
}

// node_modules/.pnpm/obsidian-calendar-ui@0.3.12_@codemirror+state@6.2.0_@codemirror+view@6.9.6/node_modules/obsidian-calendar-ui/dist/index.mjs
var import_obsidian = require("obsidian");
function noop() {
}
function assign(tar, src) {
  for (const k3 in src)
    tar[k3] = src[k3];
  return tar;
}
function is_promise(value) {
  return value && typeof value === "object" && typeof value.then === "function";
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a3, b3) {
  return a3 != a3 ? b3 == b3 : a3 !== b3 || (a3 && typeof a3 === "object" || typeof a3 === "function");
}
function not_equal(a3, b3) {
  return a3 != a3 ? b3 == b3 : a3 !== b3;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i3 = 0; i3 < len; i3 += 1) {
        merged[i3] = $$scope.dirty[i3] | lets[i3];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
  const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i3 = 0; i3 < iterations.length; i3 += 1) {
    if (iterations[i3])
      iterations[i3].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
  for (const key in attributes) {
    if (attributes[key] == null) {
      node.removeAttribute(key);
    } else if (key === "style") {
      node.style.cssText = attributes[key];
    } else if (key === "__value") {
      node.value = node[key] = attributes[key];
    } else if (descriptors[key] && descriptors[key].set) {
      node[key] = attributes[key];
    } else {
      attr(node, key, attributes[key]);
    }
  }
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var flushing = false;
var seen_callbacks = /* @__PURE__ */ new Set();
function flush() {
  if (flushing)
    return;
  flushing = true;
  do {
    for (let i3 = 0; i3 < dirty_components.length; i3 += 1) {
      const component = dirty_components[i3];
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i3 = 0; i3 < render_callbacks.length; i3 += 1) {
      const callback = render_callbacks[i3];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
function handle_promise(promise, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i3) => {
          if (i3 !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i3] === block2) {
                info.blocks[i3] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise)) {
    const current_component2 = get_current_component();
    promise.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise);
      return true;
    }
    info.resolved = promise;
  }
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o4 = old_blocks.length;
  let n2 = list.length;
  let i3 = o4;
  const old_indexes = {};
  while (i3--)
    old_indexes[old_blocks[i3].key] = i3;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  i3 = n2;
  while (i3--) {
    const child_ctx = get_context(ctx, list, i3);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i3] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i3 - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n2--;
  }
  while (o4 && n2) {
    const new_block = new_blocks[n2 - 1];
    const old_block = old_blocks[o4 - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o4--;
      n2--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o4--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o4--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o4--;
    }
  }
  while (o4--) {
    const old_block = old_blocks[o4];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n2)
    insert2(new_blocks[n2 - 1]);
  return new_blocks;
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i3 = levels.length;
  while (i3--) {
    const o4 = levels[i3];
    const n2 = updates[i3];
    if (n2) {
      for (const key in o4) {
        if (!(key in n2))
          to_null_out[key] = 1;
      }
      for (const key in n2) {
        if (!accounted_for[key]) {
          update2[key] = n2[key];
          accounted_for[key] = 1;
        }
      }
      levels[i3] = n2;
    } else {
      for (const key in o4) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2))
      update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i3) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i3 / 31 | 0] |= 1 << i3 % 31;
}
function init(component, options, instance2, create_fragment2, not_equal2, props, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    // state
    props,
    update: noop,
    not_equal: not_equal2,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false
  };
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i3, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal2($$.ctx[i3], $$.ctx[i3] = value)) {
      if (!$$.skip_bound && $$.bound[i3])
        $$.bound[i3](value);
      if (ready)
        make_dirty(component, i3);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function getDateUID(date, granularity = "day") {
  const ts = date.clone().startOf(granularity).format();
  return `${granularity}-${ts}`;
}
var getDateUID_1 = getDateUID;
function add_css$5() {
  var style = element("style");
  style.id = "svelte-1widvzq-style";
  style.textContent = ".dot.svelte-1widvzq,.hollow.svelte-1widvzq{display:inline-block;height:6px;width:6px;margin:0 1px}.filled.svelte-1widvzq{fill:var(--color-dot)}.active.filled.svelte-1widvzq{fill:var(--text-on-accent)}.hollow.svelte-1widvzq{fill:none;stroke:var(--color-dot)}.active.hollow.svelte-1widvzq{fill:none;stroke:var(--text-on-accent)}";
  append(document.head, style);
}
function create_else_block$1(ctx) {
  let svg;
  let circle;
  let svg_class_value;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", svg_class_value = null_to_empty(`hollow ${/*className*/
      ctx[0]}`) + " svelte-1widvzq");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      toggle_class(
        svg,
        "active",
        /*isActive*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, dirty) {
      if (dirty & /*className*/
      1 && svg_class_value !== (svg_class_value = null_to_empty(`hollow ${/*className*/
      ctx2[0]}`) + " svelte-1widvzq")) {
        attr(svg, "class", svg_class_value);
      }
      if (dirty & /*className, isActive*/
      5) {
        toggle_class(
          svg,
          "active",
          /*isActive*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function create_if_block$2(ctx) {
  let svg;
  let circle;
  let svg_class_value;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", svg_class_value = null_to_empty(`dot filled ${/*className*/
      ctx[0]}`) + " svelte-1widvzq");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      toggle_class(
        svg,
        "active",
        /*isActive*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, dirty) {
      if (dirty & /*className*/
      1 && svg_class_value !== (svg_class_value = null_to_empty(`dot filled ${/*className*/
      ctx2[0]}`) + " svelte-1widvzq")) {
        attr(svg, "class", svg_class_value);
      }
      if (dirty & /*className, isActive*/
      5) {
        toggle_class(
          svg,
          "active",
          /*isActive*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function create_fragment$6(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*isFilled*/
      ctx2[1]
    )
      return create_if_block$2;
    return create_else_block$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let { className = "" } = $$props;
  let { isFilled } = $$props;
  let { isActive } = $$props;
  $$self.$$set = ($$props2) => {
    if ("className" in $$props2)
      $$invalidate(0, className = $$props2.className);
    if ("isFilled" in $$props2)
      $$invalidate(1, isFilled = $$props2.isFilled);
    if ("isActive" in $$props2)
      $$invalidate(2, isActive = $$props2.isActive);
  };
  return [className, isFilled, isActive];
}
var Dot = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-1widvzq-style"))
      add_css$5();
    init(this, options, instance$6, create_fragment$6, safe_not_equal, { className: 0, isFilled: 1, isActive: 2 });
  }
};
var get_default_slot_changes_1 = (dirty) => ({});
var get_default_slot_context_1 = (ctx) => ({ metadata: null });
var get_default_slot_changes = (dirty) => ({ metadata: dirty & /*metadata*/
1 });
var get_default_slot_context = (ctx) => ({ metadata: (
  /*resolvedMeta*/
  ctx[3]
) });
function create_else_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    get_default_slot_context_1
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && dirty & /*$$scope*/
        2) {
          update_slot(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            dirty,
            get_default_slot_changes_1,
            get_default_slot_context_1
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_if_block$1(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 3,
    blocks: [, , ,]
  };
  handle_promise(promise = /*metadata*/
  ctx[0], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*metadata*/
      1 && promise !== (promise = /*metadata*/
      ctx[0]) && handle_promise(promise, info))
        ;
      else {
        const child_ctx = ctx.slice();
        child_ctx[3] = info.resolved;
        info.block.p(child_ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i3 = 0; i3 < 3; i3 += 1) {
        const block = info.blocks[i3];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(await_block_anchor);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && dirty & /*$$scope, metadata*/
        3) {
          update_slot(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            dirty,
            get_default_slot_changes,
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_pending_block(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment$5(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$1, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*metadata*/
      ctx2[0]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { metadata } = $$props;
  $$self.$$set = ($$props2) => {
    if ("metadata" in $$props2)
      $$invalidate(0, metadata = $$props2.metadata);
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [metadata, $$scope, slots];
}
var MetadataResolver = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, not_equal, { metadata: 0 });
  }
};
function isMacOS() {
  return navigator.appVersion.indexOf("Mac") !== -1;
}
function isMetaPressed(e3) {
  return isMacOS() ? e3.metaKey : e3.ctrlKey;
}
function getDaysOfWeek(..._args) {
  return window.moment.weekdaysShort(true);
}
function isWeekend(date) {
  return date.isoWeekday() === 6 || date.isoWeekday() === 7;
}
function getStartOfWeek(days) {
  return days[0].weekday(0);
}
function getMonth(displayedMonth, ..._args) {
  const locale = window.moment().locale();
  const month = [];
  let week;
  const startOfMonth = displayedMonth.clone().locale(locale).date(1);
  const startOffset = startOfMonth.weekday();
  let date = startOfMonth.clone().subtract(startOffset, "days");
  for (let _day = 0; _day < 42; _day++) {
    if (_day % 7 === 0) {
      week = {
        days: [],
        weekNum: date.week()
      };
      month.push(week);
    }
    week.days.push(date);
    date = date.clone().add(1, "days");
  }
  return month;
}
function add_css$4() {
  var style = element("style");
  style.id = "svelte-q3wqg9-style";
  style.textContent = ".day.svelte-q3wqg9{background-color:var(--color-background-day);border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:4px;position:relative;text-align:center;transition:background-color 0.1s ease-in, color 0.1s ease-in;vertical-align:baseline}.day.svelte-q3wqg9:hover{background-color:var(--interactive-hover)}.day.active.svelte-q3wqg9:hover{background-color:var(--interactive-accent-hover)}.adjacent-month.svelte-q3wqg9{opacity:0.25}.today.svelte-q3wqg9{color:var(--color-text-today)}.day.svelte-q3wqg9:active,.active.svelte-q3wqg9,.active.today.svelte-q3wqg9{color:var(--text-on-accent);background-color:var(--interactive-accent)}.dot-container.svelte-q3wqg9{display:flex;flex-wrap:wrap;justify-content:center;line-height:6px;min-height:6px}";
  append(document.head, style);
}
function get_each_context$2(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i3];
  return child_ctx;
}
function create_each_block$2(ctx) {
  let dot;
  let current;
  const dot_spread_levels = [
    /*dot*/
    ctx[11]
  ];
  let dot_props = {};
  for (let i3 = 0; i3 < dot_spread_levels.length; i3 += 1) {
    dot_props = assign(dot_props, dot_spread_levels[i3]);
  }
  dot = new Dot({ props: dot_props });
  return {
    c() {
      create_component(dot.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dot, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dot_changes = dirty & /*metadata*/
      128 ? get_spread_update(dot_spread_levels, [get_spread_object(
        /*dot*/
        ctx2[11]
      )]) : {};
      dot.$set(dot_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dot.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dot.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dot, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let div1;
  let t0_value = (
    /*date*/
    ctx[0].format("D") + ""
  );
  let t0;
  let t1;
  let div0;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value = (
    /*metadata*/
    ctx[7].dots
  );
  let each_blocks = [];
  for (let i3 = 0; i3 < each_value.length; i3 += 1) {
    each_blocks[i3] = create_each_block$2(get_each_context$2(ctx, each_value, i3));
  }
  const out = (i3) => transition_out(each_blocks[i3], 1, 1, () => {
    each_blocks[i3] = null;
  });
  let div1_levels = [
    {
      class: div1_class_value = `day ${/*metadata*/
      ctx[7].classes.join(" ")}`
    },
    /*metadata*/
    ctx[7].dataAttributes || {}
  ];
  let div1_data = {};
  for (let i3 = 0; i3 < div1_levels.length; i3 += 1) {
    div1_data = assign(div1_data, div1_levels[i3]);
  }
  return {
    c() {
      div1 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].c();
      }
      attr(div0, "class", "dot-container svelte-q3wqg9");
      set_attributes(div1, div1_data);
      toggle_class(
        div1,
        "active",
        /*selectedId*/
        ctx[6] === getDateUID_1(
          /*date*/
          ctx[0],
          "day"
        )
      );
      toggle_class(div1, "adjacent-month", !/*date*/
      ctx[0].isSame(
        /*displayedMonth*/
        ctx[5],
        "month"
      ));
      toggle_class(
        div1,
        "today",
        /*date*/
        ctx[0].isSame(
          /*today*/
          ctx[4],
          "day"
        )
      );
      toggle_class(div1, "svelte-q3wqg9", true);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, t0);
      append(div1, t1);
      append(div1, div0);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].m(div0, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "click", function() {
            if (is_function(
              /*onClick*/
              ctx[2] && /*click_handler*/
              ctx[8]
            ))
              /*onClick*/
              (ctx[2] && /*click_handler*/
              ctx[8]).apply(this, arguments);
          }),
          listen(div1, "contextmenu", function() {
            if (is_function(
              /*onContextMenu*/
              ctx[3] && /*contextmenu_handler*/
              ctx[9]
            ))
              /*onContextMenu*/
              (ctx[3] && /*contextmenu_handler*/
              ctx[9]).apply(this, arguments);
          }),
          listen(div1, "pointerover", function() {
            if (is_function(
              /*onHover*/
              ctx[1] && /*pointerover_handler*/
              ctx[10]
            ))
              /*onHover*/
              (ctx[1] && /*pointerover_handler*/
              ctx[10]).apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*date*/
      1) && t0_value !== (t0_value = /*date*/
      ctx[0].format("D") + ""))
        set_data(t0, t0_value);
      if (dirty & /*metadata*/
      128) {
        each_value = /*metadata*/
        ctx[7].dots;
        let i3;
        for (i3 = 0; i3 < each_value.length; i3 += 1) {
          const child_ctx = get_each_context$2(ctx, each_value, i3);
          if (each_blocks[i3]) {
            each_blocks[i3].p(child_ctx, dirty);
            transition_in(each_blocks[i3], 1);
          } else {
            each_blocks[i3] = create_each_block$2(child_ctx);
            each_blocks[i3].c();
            transition_in(each_blocks[i3], 1);
            each_blocks[i3].m(div0, null);
          }
        }
        group_outros();
        for (i3 = each_value.length; i3 < each_blocks.length; i3 += 1) {
          out(i3);
        }
        check_outros();
      }
      set_attributes(div1, div1_data = get_spread_update(div1_levels, [
        (!current || dirty & /*metadata*/
        128 && div1_class_value !== (div1_class_value = `day ${/*metadata*/
        ctx[7].classes.join(" ")}`)) && { class: div1_class_value },
        dirty & /*metadata*/
        128 && /*metadata*/
        (ctx[7].dataAttributes || {})
      ]));
      toggle_class(
        div1,
        "active",
        /*selectedId*/
        ctx[6] === getDateUID_1(
          /*date*/
          ctx[0],
          "day"
        )
      );
      toggle_class(div1, "adjacent-month", !/*date*/
      ctx[0].isSame(
        /*displayedMonth*/
        ctx[5],
        "month"
      ));
      toggle_class(
        div1,
        "today",
        /*date*/
        ctx[0].isSame(
          /*today*/
          ctx[4],
          "day"
        )
      );
      toggle_class(div1, "svelte-q3wqg9", true);
    },
    i(local) {
      if (current)
        return;
      for (let i3 = 0; i3 < each_value.length; i3 += 1) {
        transition_in(each_blocks[i3]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        transition_out(each_blocks[i3]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$4(ctx) {
  let td;
  let metadataresolver;
  let current;
  metadataresolver = new MetadataResolver({
    props: {
      metadata: (
        /*metadata*/
        ctx[7]
      ),
      $$slots: {
        default: [
          create_default_slot$1,
          ({ metadata }) => ({ 7: metadata }),
          ({ metadata }) => metadata ? 128 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      td = element("td");
      create_component(metadataresolver.$$.fragment);
    },
    m(target, anchor) {
      insert(target, td, anchor);
      mount_component(metadataresolver, td, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const metadataresolver_changes = {};
      if (dirty & /*metadata*/
      128)
        metadataresolver_changes.metadata = /*metadata*/
        ctx2[7];
      if (dirty & /*$$scope, metadata, selectedId, date, displayedMonth, today, onClick, onContextMenu, onHover*/
      16639) {
        metadataresolver_changes.$$scope = { dirty, ctx: ctx2 };
      }
      metadataresolver.$set(metadataresolver_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(metadataresolver.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(metadataresolver.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(td);
      destroy_component(metadataresolver);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { date } = $$props;
  let { metadata } = $$props;
  let { onHover } = $$props;
  let { onClick } = $$props;
  let { onContextMenu } = $$props;
  let { today } = $$props;
  let { displayedMonth = null } = $$props;
  let { selectedId = null } = $$props;
  const click_handler = (e3) => onClick(date, isMetaPressed(e3));
  const contextmenu_handler = (e3) => onContextMenu(date, e3);
  const pointerover_handler = (e3) => onHover(date, e3.target, isMetaPressed(e3));
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("metadata" in $$props2)
      $$invalidate(7, metadata = $$props2.metadata);
    if ("onHover" in $$props2)
      $$invalidate(1, onHover = $$props2.onHover);
    if ("onClick" in $$props2)
      $$invalidate(2, onClick = $$props2.onClick);
    if ("onContextMenu" in $$props2)
      $$invalidate(3, onContextMenu = $$props2.onContextMenu);
    if ("today" in $$props2)
      $$invalidate(4, today = $$props2.today);
    if ("displayedMonth" in $$props2)
      $$invalidate(5, displayedMonth = $$props2.displayedMonth);
    if ("selectedId" in $$props2)
      $$invalidate(6, selectedId = $$props2.selectedId);
  };
  return [
    date,
    onHover,
    onClick,
    onContextMenu,
    today,
    displayedMonth,
    selectedId,
    metadata,
    click_handler,
    contextmenu_handler,
    pointerover_handler
  ];
}
var Day = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-q3wqg9-style"))
      add_css$4();
    init(this, options, instance$4, create_fragment$4, not_equal, {
      date: 0,
      metadata: 7,
      onHover: 1,
      onClick: 2,
      onContextMenu: 3,
      today: 4,
      displayedMonth: 5,
      selectedId: 6
    });
  }
};
function add_css$3() {
  var style = element("style");
  style.id = "svelte-156w7na-style";
  style.textContent = ".arrow.svelte-156w7na.svelte-156w7na{align-items:center;cursor:pointer;display:flex;justify-content:center;width:24px}.arrow.is-mobile.svelte-156w7na.svelte-156w7na{width:32px}.right.svelte-156w7na.svelte-156w7na{transform:rotate(180deg)}.arrow.svelte-156w7na svg.svelte-156w7na{color:var(--color-arrow);height:16px;width:16px}";
  append(document.head, style);
}
function create_fragment$3(ctx) {
  let div;
  let svg;
  let path;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z");
      attr(svg, "focusable", "false");
      attr(svg, "role", "img");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "0 0 320 512");
      attr(svg, "class", "svelte-156w7na");
      attr(div, "class", "arrow svelte-156w7na");
      attr(
        div,
        "aria-label",
        /*tooltip*/
        ctx[1]
      );
      toggle_class(
        div,
        "is-mobile",
        /*isMobile*/
        ctx[3]
      );
      toggle_class(
        div,
        "right",
        /*direction*/
        ctx[2] === "right"
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, svg);
      append(svg, path);
      if (!mounted) {
        dispose = listen(div, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[0]
          ))
            ctx[0].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*tooltip*/
      2) {
        attr(
          div,
          "aria-label",
          /*tooltip*/
          ctx[1]
        );
      }
      if (dirty & /*direction*/
      4) {
        toggle_class(
          div,
          "right",
          /*direction*/
          ctx[2] === "right"
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { onClick } = $$props;
  let { tooltip } = $$props;
  let { direction } = $$props;
  let isMobile = window.app.isMobile;
  $$self.$$set = ($$props2) => {
    if ("onClick" in $$props2)
      $$invalidate(0, onClick = $$props2.onClick);
    if ("tooltip" in $$props2)
      $$invalidate(1, tooltip = $$props2.tooltip);
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
  };
  return [onClick, tooltip, direction, isMobile];
}
var Arrow = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-156w7na-style"))
      add_css$3();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, { onClick: 0, tooltip: 1, direction: 2 });
  }
};
function add_css$2() {
  var style = element("style");
  style.id = "svelte-1vwr9dd-style";
  style.textContent = ".nav.svelte-1vwr9dd.svelte-1vwr9dd{align-items:center;display:flex;margin:0.6em 0 1em;padding:0 8px;width:100%}.nav.is-mobile.svelte-1vwr9dd.svelte-1vwr9dd{padding:0}.title.svelte-1vwr9dd.svelte-1vwr9dd{color:var(--color-text-title);font-size:1.5em;margin:0}.is-mobile.svelte-1vwr9dd .title.svelte-1vwr9dd{font-size:1.3em}.month.svelte-1vwr9dd.svelte-1vwr9dd{font-weight:500;text-transform:capitalize}.year.svelte-1vwr9dd.svelte-1vwr9dd{color:var(--interactive-accent)}.right-nav.svelte-1vwr9dd.svelte-1vwr9dd{display:flex;justify-content:center;margin-left:auto}.reset-button.svelte-1vwr9dd.svelte-1vwr9dd{cursor:pointer;border-radius:4px;color:var(--text-muted);font-size:0.7em;font-weight:600;letter-spacing:1px;margin:0 4px;padding:0px 4px;text-transform:uppercase}.is-mobile.svelte-1vwr9dd .reset-button.svelte-1vwr9dd{display:none}";
  append(document.head, style);
}
function create_fragment$2(ctx) {
  let div2;
  let h3;
  let span0;
  let t0_value = (
    /*displayedMonth*/
    ctx[0].format("MMM") + ""
  );
  let t0;
  let t1;
  let span1;
  let t2_value = (
    /*displayedMonth*/
    ctx[0].format("YYYY") + ""
  );
  let t22;
  let t3;
  let div1;
  let arrow0;
  let t4;
  let div0;
  let t6;
  let arrow1;
  let current;
  let mounted;
  let dispose;
  arrow0 = new Arrow({
    props: {
      direction: "left",
      onClick: (
        /*decrementDisplayedMonth*/
        ctx[3]
      ),
      tooltip: "Previous Month"
    }
  });
  arrow1 = new Arrow({
    props: {
      direction: "right",
      onClick: (
        /*incrementDisplayedMonth*/
        ctx[2]
      ),
      tooltip: "Next Month"
    }
  });
  return {
    c() {
      div2 = element("div");
      h3 = element("h3");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t22 = text(t2_value);
      t3 = space();
      div1 = element("div");
      create_component(arrow0.$$.fragment);
      t4 = space();
      div0 = element("div");
      div0.textContent = `${/*todayDisplayStr*/
      ctx[4]}`;
      t6 = space();
      create_component(arrow1.$$.fragment);
      attr(span0, "class", "month svelte-1vwr9dd");
      attr(span1, "class", "year svelte-1vwr9dd");
      attr(h3, "class", "title svelte-1vwr9dd");
      attr(div0, "class", "reset-button svelte-1vwr9dd");
      attr(div1, "class", "right-nav svelte-1vwr9dd");
      attr(div2, "class", "nav svelte-1vwr9dd");
      toggle_class(
        div2,
        "is-mobile",
        /*isMobile*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, h3);
      append(h3, span0);
      append(span0, t0);
      append(h3, t1);
      append(h3, span1);
      append(span1, t22);
      append(div2, t3);
      append(div2, div1);
      mount_component(arrow0, div1, null);
      append(div1, t4);
      append(div1, div0);
      append(div1, t6);
      mount_component(arrow1, div1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(h3, "click", function() {
            if (is_function(
              /*resetDisplayedMonth*/
              ctx[1]
            ))
              ctx[1].apply(this, arguments);
          }),
          listen(div0, "click", function() {
            if (is_function(
              /*resetDisplayedMonth*/
              ctx[1]
            ))
              ctx[1].apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if ((!current || dirty & /*displayedMonth*/
      1) && t0_value !== (t0_value = /*displayedMonth*/
      ctx[0].format("MMM") + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & /*displayedMonth*/
      1) && t2_value !== (t2_value = /*displayedMonth*/
      ctx[0].format("YYYY") + ""))
        set_data(t22, t2_value);
      const arrow0_changes = {};
      if (dirty & /*decrementDisplayedMonth*/
      8)
        arrow0_changes.onClick = /*decrementDisplayedMonth*/
        ctx[3];
      arrow0.$set(arrow0_changes);
      const arrow1_changes = {};
      if (dirty & /*incrementDisplayedMonth*/
      4)
        arrow1_changes.onClick = /*incrementDisplayedMonth*/
        ctx[2];
      arrow1.$set(arrow1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(arrow0.$$.fragment, local);
      transition_in(arrow1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(arrow0.$$.fragment, local);
      transition_out(arrow1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(arrow0);
      destroy_component(arrow1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let { displayedMonth } = $$props;
  let { today } = $$props;
  let { resetDisplayedMonth } = $$props;
  let { incrementDisplayedMonth } = $$props;
  let { decrementDisplayedMonth } = $$props;
  const todayDisplayStr = today.calendar().split(/\d|\s/)[0];
  let isMobile = window.app.isMobile;
  $$self.$$set = ($$props2) => {
    if ("displayedMonth" in $$props2)
      $$invalidate(0, displayedMonth = $$props2.displayedMonth);
    if ("today" in $$props2)
      $$invalidate(6, today = $$props2.today);
    if ("resetDisplayedMonth" in $$props2)
      $$invalidate(1, resetDisplayedMonth = $$props2.resetDisplayedMonth);
    if ("incrementDisplayedMonth" in $$props2)
      $$invalidate(2, incrementDisplayedMonth = $$props2.incrementDisplayedMonth);
    if ("decrementDisplayedMonth" in $$props2)
      $$invalidate(3, decrementDisplayedMonth = $$props2.decrementDisplayedMonth);
  };
  return [
    displayedMonth,
    resetDisplayedMonth,
    incrementDisplayedMonth,
    decrementDisplayedMonth,
    todayDisplayStr,
    isMobile,
    today
  ];
}
var Nav = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-1vwr9dd-style"))
      add_css$2();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {
      displayedMonth: 0,
      today: 6,
      resetDisplayedMonth: 1,
      incrementDisplayedMonth: 2,
      decrementDisplayedMonth: 3
    });
  }
};
function add_css$1() {
  var style = element("style");
  style.id = "svelte-egt0yd-style";
  style.textContent = "td.svelte-egt0yd{border-right:1px solid var(--background-modifier-border)}.week-num.svelte-egt0yd{background-color:var(--color-background-weeknum);border-radius:4px;color:var(--color-text-weeknum);cursor:pointer;font-size:0.65em;height:100%;padding:4px;text-align:center;transition:background-color 0.1s ease-in, color 0.1s ease-in;vertical-align:baseline}.week-num.svelte-egt0yd:hover{background-color:var(--interactive-hover)}.week-num.active.svelte-egt0yd:hover{background-color:var(--interactive-accent-hover)}.active.svelte-egt0yd{color:var(--text-on-accent);background-color:var(--interactive-accent)}.dot-container.svelte-egt0yd{display:flex;flex-wrap:wrap;justify-content:center;line-height:6px;min-height:6px}";
  append(document.head, style);
}
function get_each_context$1(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i3];
  return child_ctx;
}
function create_each_block$1(ctx) {
  let dot;
  let current;
  const dot_spread_levels = [
    /*dot*/
    ctx[11]
  ];
  let dot_props = {};
  for (let i3 = 0; i3 < dot_spread_levels.length; i3 += 1) {
    dot_props = assign(dot_props, dot_spread_levels[i3]);
  }
  dot = new Dot({ props: dot_props });
  return {
    c() {
      create_component(dot.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dot, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dot_changes = dirty & /*metadata*/
      64 ? get_spread_update(dot_spread_levels, [get_spread_object(
        /*dot*/
        ctx2[11]
      )]) : {};
      dot.$set(dot_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dot.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dot.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dot, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let div1;
  let t0;
  let t1;
  let div0;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value = (
    /*metadata*/
    ctx[6].dots
  );
  let each_blocks = [];
  for (let i3 = 0; i3 < each_value.length; i3 += 1) {
    each_blocks[i3] = create_each_block$1(get_each_context$1(ctx, each_value, i3));
  }
  const out = (i3) => transition_out(each_blocks[i3], 1, 1, () => {
    each_blocks[i3] = null;
  });
  return {
    c() {
      div1 = element("div");
      t0 = text(
        /*weekNum*/
        ctx[0]
      );
      t1 = space();
      div0 = element("div");
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].c();
      }
      attr(div0, "class", "dot-container svelte-egt0yd");
      attr(div1, "class", div1_class_value = null_to_empty(`week-num ${/*metadata*/
      ctx[6].classes.join(" ")}`) + " svelte-egt0yd");
      toggle_class(
        div1,
        "active",
        /*selectedId*/
        ctx[5] === getDateUID_1(
          /*days*/
          ctx[1][0],
          "week"
        )
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, t0);
      append(div1, t1);
      append(div1, div0);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].m(div0, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "click", function() {
            if (is_function(
              /*onClick*/
              ctx[3] && /*click_handler*/
              ctx[8]
            ))
              /*onClick*/
              (ctx[3] && /*click_handler*/
              ctx[8]).apply(this, arguments);
          }),
          listen(div1, "contextmenu", function() {
            if (is_function(
              /*onContextMenu*/
              ctx[4] && /*contextmenu_handler*/
              ctx[9]
            ))
              /*onContextMenu*/
              (ctx[4] && /*contextmenu_handler*/
              ctx[9]).apply(this, arguments);
          }),
          listen(div1, "pointerover", function() {
            if (is_function(
              /*onHover*/
              ctx[2] && /*pointerover_handler*/
              ctx[10]
            ))
              /*onHover*/
              (ctx[2] && /*pointerover_handler*/
              ctx[10]).apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*weekNum*/
      1)
        set_data(
          t0,
          /*weekNum*/
          ctx[0]
        );
      if (dirty & /*metadata*/
      64) {
        each_value = /*metadata*/
        ctx[6].dots;
        let i3;
        for (i3 = 0; i3 < each_value.length; i3 += 1) {
          const child_ctx = get_each_context$1(ctx, each_value, i3);
          if (each_blocks[i3]) {
            each_blocks[i3].p(child_ctx, dirty);
            transition_in(each_blocks[i3], 1);
          } else {
            each_blocks[i3] = create_each_block$1(child_ctx);
            each_blocks[i3].c();
            transition_in(each_blocks[i3], 1);
            each_blocks[i3].m(div0, null);
          }
        }
        group_outros();
        for (i3 = each_value.length; i3 < each_blocks.length; i3 += 1) {
          out(i3);
        }
        check_outros();
      }
      if (!current || dirty & /*metadata*/
      64 && div1_class_value !== (div1_class_value = null_to_empty(`week-num ${/*metadata*/
      ctx[6].classes.join(" ")}`) + " svelte-egt0yd")) {
        attr(div1, "class", div1_class_value);
      }
      if (dirty & /*metadata, selectedId, getDateUID, days*/
      98) {
        toggle_class(
          div1,
          "active",
          /*selectedId*/
          ctx[5] === getDateUID_1(
            /*days*/
            ctx[1][0],
            "week"
          )
        );
      }
    },
    i(local) {
      if (current)
        return;
      for (let i3 = 0; i3 < each_value.length; i3 += 1) {
        transition_in(each_blocks[i3]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        transition_out(each_blocks[i3]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$1(ctx) {
  let td;
  let metadataresolver;
  let current;
  metadataresolver = new MetadataResolver({
    props: {
      metadata: (
        /*metadata*/
        ctx[6]
      ),
      $$slots: {
        default: [
          create_default_slot,
          ({ metadata }) => ({ 6: metadata }),
          ({ metadata }) => metadata ? 64 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      td = element("td");
      create_component(metadataresolver.$$.fragment);
      attr(td, "class", "svelte-egt0yd");
    },
    m(target, anchor) {
      insert(target, td, anchor);
      mount_component(metadataresolver, td, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const metadataresolver_changes = {};
      if (dirty & /*metadata*/
      64)
        metadataresolver_changes.metadata = /*metadata*/
        ctx2[6];
      if (dirty & /*$$scope, metadata, selectedId, days, onClick, startOfWeek, onContextMenu, onHover, weekNum*/
      16639) {
        metadataresolver_changes.$$scope = { dirty, ctx: ctx2 };
      }
      metadataresolver.$set(metadataresolver_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(metadataresolver.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(metadataresolver.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(td);
      destroy_component(metadataresolver);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let { weekNum } = $$props;
  let { days } = $$props;
  let { metadata } = $$props;
  let { onHover } = $$props;
  let { onClick } = $$props;
  let { onContextMenu } = $$props;
  let { selectedId = null } = $$props;
  let startOfWeek;
  const click_handler = (e3) => onClick(startOfWeek, isMetaPressed(e3));
  const contextmenu_handler = (e3) => onContextMenu(days[0], e3);
  const pointerover_handler = (e3) => onHover(startOfWeek, e3.target, isMetaPressed(e3));
  $$self.$$set = ($$props2) => {
    if ("weekNum" in $$props2)
      $$invalidate(0, weekNum = $$props2.weekNum);
    if ("days" in $$props2)
      $$invalidate(1, days = $$props2.days);
    if ("metadata" in $$props2)
      $$invalidate(6, metadata = $$props2.metadata);
    if ("onHover" in $$props2)
      $$invalidate(2, onHover = $$props2.onHover);
    if ("onClick" in $$props2)
      $$invalidate(3, onClick = $$props2.onClick);
    if ("onContextMenu" in $$props2)
      $$invalidate(4, onContextMenu = $$props2.onContextMenu);
    if ("selectedId" in $$props2)
      $$invalidate(5, selectedId = $$props2.selectedId);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*days*/
    2) {
      $$invalidate(7, startOfWeek = getStartOfWeek(days));
    }
  };
  return [
    weekNum,
    days,
    onHover,
    onClick,
    onContextMenu,
    selectedId,
    metadata,
    startOfWeek,
    click_handler,
    contextmenu_handler,
    pointerover_handler
  ];
}
var WeekNum = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-egt0yd-style"))
      add_css$1();
    init(this, options, instance$1, create_fragment$1, not_equal, {
      weekNum: 0,
      days: 1,
      metadata: 6,
      onHover: 2,
      onClick: 3,
      onContextMenu: 4,
      selectedId: 5
    });
  }
};
async function metadataReducer(promisedMetadata) {
  const meta = {
    dots: [],
    classes: [],
    dataAttributes: {}
  };
  const metas = await Promise.all(promisedMetadata);
  return metas.reduce((acc, meta2) => ({
    classes: [...acc.classes, ...meta2.classes || []],
    dataAttributes: Object.assign(acc.dataAttributes, meta2.dataAttributes),
    dots: [...acc.dots, ...meta2.dots || []]
  }), meta);
}
function getDailyMetadata(sources, date, ..._args) {
  return metadataReducer(sources.map((source) => source.getDailyMetadata(date)));
}
function getWeeklyMetadata(sources, date, ..._args) {
  return metadataReducer(sources.map((source) => source.getWeeklyMetadata(date)));
}
function add_css() {
  var style = element("style");
  style.id = "svelte-pcimu8-style";
  style.textContent = ".container.svelte-pcimu8{--color-background-heading:transparent;--color-background-day:transparent;--color-background-weeknum:transparent;--color-background-weekend:transparent;--color-dot:var(--text-muted);--color-arrow:var(--text-muted);--color-button:var(--text-muted);--color-text-title:var(--text-normal);--color-text-heading:var(--text-muted);--color-text-day:var(--text-normal);--color-text-today:var(--interactive-accent);--color-text-weeknum:var(--text-muted)}.container.svelte-pcimu8{padding:0 8px}.container.is-mobile.svelte-pcimu8{padding:0}th.svelte-pcimu8{text-align:center}.weekend.svelte-pcimu8{background-color:var(--color-background-weekend)}.calendar.svelte-pcimu8{border-collapse:collapse;width:100%}th.svelte-pcimu8{background-color:var(--color-background-heading);color:var(--color-text-heading);font-size:0.6em;letter-spacing:1px;padding:4px;text-transform:uppercase}";
  append(document.head, style);
}
function get_each_context(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i3];
  return child_ctx;
}
function get_each_context_1(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i3];
  return child_ctx;
}
function get_each_context_2(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i3];
  return child_ctx;
}
function get_each_context_3(ctx, list, i3) {
  const child_ctx = ctx.slice();
  child_ctx[27] = list[i3];
  return child_ctx;
}
function create_if_block_2(ctx) {
  let col;
  return {
    c() {
      col = element("col");
    },
    m(target, anchor) {
      insert(target, col, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(col);
    }
  };
}
function create_each_block_3(ctx) {
  let col;
  return {
    c() {
      col = element("col");
      attr(col, "class", "svelte-pcimu8");
      toggle_class(col, "weekend", isWeekend(
        /*date*/
        ctx[27]
      ));
    },
    m(target, anchor) {
      insert(target, col, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*isWeekend, month*/
      16384) {
        toggle_class(col, "weekend", isWeekend(
          /*date*/
          ctx2[27]
        ));
      }
    },
    d(detaching) {
      if (detaching)
        detach(col);
    }
  };
}
function create_if_block_1(ctx) {
  let th;
  return {
    c() {
      th = element("th");
      th.textContent = "W";
      attr(th, "class", "svelte-pcimu8");
    },
    m(target, anchor) {
      insert(target, th, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(th);
    }
  };
}
function create_each_block_2(ctx) {
  let th;
  let t_value = (
    /*dayOfWeek*/
    ctx[24] + ""
  );
  let t3;
  return {
    c() {
      th = element("th");
      t3 = text(t_value);
      attr(th, "class", "svelte-pcimu8");
    },
    m(target, anchor) {
      insert(target, th, anchor);
      append(th, t3);
    },
    p(ctx2, dirty) {
      if (dirty & /*daysOfWeek*/
      32768 && t_value !== (t_value = /*dayOfWeek*/
      ctx2[24] + ""))
        set_data(t3, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(th);
    }
  };
}
function create_if_block(ctx) {
  let weeknum;
  let current;
  const weeknum_spread_levels = [
    /*week*/
    ctx[18],
    {
      metadata: getWeeklyMetadata(
        /*sources*/
        ctx[8],
        /*week*/
        ctx[18].days[0],
        /*today*/
        ctx[10]
      )
    },
    { onClick: (
      /*onClickWeek*/
      ctx[7]
    ) },
    {
      onContextMenu: (
        /*onContextMenuWeek*/
        ctx[5]
      )
    },
    { onHover: (
      /*onHoverWeek*/
      ctx[3]
    ) },
    { selectedId: (
      /*selectedId*/
      ctx[9]
    ) }
  ];
  let weeknum_props = {};
  for (let i3 = 0; i3 < weeknum_spread_levels.length; i3 += 1) {
    weeknum_props = assign(weeknum_props, weeknum_spread_levels[i3]);
  }
  weeknum = new WeekNum({ props: weeknum_props });
  return {
    c() {
      create_component(weeknum.$$.fragment);
    },
    m(target, anchor) {
      mount_component(weeknum, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const weeknum_changes = dirty & /*month, getWeeklyMetadata, sources, today, onClickWeek, onContextMenuWeek, onHoverWeek, selectedId*/
      18344 ? get_spread_update(weeknum_spread_levels, [
        dirty & /*month*/
        16384 && get_spread_object(
          /*week*/
          ctx2[18]
        ),
        dirty & /*getWeeklyMetadata, sources, month, today*/
        17664 && {
          metadata: getWeeklyMetadata(
            /*sources*/
            ctx2[8],
            /*week*/
            ctx2[18].days[0],
            /*today*/
            ctx2[10]
          )
        },
        dirty & /*onClickWeek*/
        128 && { onClick: (
          /*onClickWeek*/
          ctx2[7]
        ) },
        dirty & /*onContextMenuWeek*/
        32 && {
          onContextMenu: (
            /*onContextMenuWeek*/
            ctx2[5]
          )
        },
        dirty & /*onHoverWeek*/
        8 && { onHover: (
          /*onHoverWeek*/
          ctx2[3]
        ) },
        dirty & /*selectedId*/
        512 && { selectedId: (
          /*selectedId*/
          ctx2[9]
        ) }
      ]) : {};
      weeknum.$set(weeknum_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(weeknum.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(weeknum.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(weeknum, detaching);
    }
  };
}
function create_each_block_1(key_1, ctx) {
  let first;
  let day;
  let current;
  day = new Day({
    props: {
      date: (
        /*day*/
        ctx[21]
      ),
      today: (
        /*today*/
        ctx[10]
      ),
      displayedMonth: (
        /*displayedMonth*/
        ctx[0]
      ),
      onClick: (
        /*onClickDay*/
        ctx[6]
      ),
      onContextMenu: (
        /*onContextMenuDay*/
        ctx[4]
      ),
      onHover: (
        /*onHoverDay*/
        ctx[2]
      ),
      metadata: getDailyMetadata(
        /*sources*/
        ctx[8],
        /*day*/
        ctx[21],
        /*today*/
        ctx[10]
      ),
      selectedId: (
        /*selectedId*/
        ctx[9]
      )
    }
  });
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(day.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(day, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const day_changes = {};
      if (dirty & /*month*/
      16384)
        day_changes.date = /*day*/
        ctx[21];
      if (dirty & /*today*/
      1024)
        day_changes.today = /*today*/
        ctx[10];
      if (dirty & /*displayedMonth*/
      1)
        day_changes.displayedMonth = /*displayedMonth*/
        ctx[0];
      if (dirty & /*onClickDay*/
      64)
        day_changes.onClick = /*onClickDay*/
        ctx[6];
      if (dirty & /*onContextMenuDay*/
      16)
        day_changes.onContextMenu = /*onContextMenuDay*/
        ctx[4];
      if (dirty & /*onHoverDay*/
      4)
        day_changes.onHover = /*onHoverDay*/
        ctx[2];
      if (dirty & /*sources, month, today*/
      17664)
        day_changes.metadata = getDailyMetadata(
          /*sources*/
          ctx[8],
          /*day*/
          ctx[21],
          /*today*/
          ctx[10]
        );
      if (dirty & /*selectedId*/
      512)
        day_changes.selectedId = /*selectedId*/
        ctx[9];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(day, detaching);
    }
  };
}
function create_each_block(key_1, ctx) {
  let tr;
  let t0;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t1;
  let current;
  let if_block = (
    /*showWeekNums*/
    ctx[1] && create_if_block(ctx)
  );
  let each_value_1 = (
    /*week*/
    ctx[18].days
  );
  const get_key = (ctx2) => (
    /*day*/
    ctx2[21].format()
  );
  for (let i3 = 0; i3 < each_value_1.length; i3 += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i3);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i3] = create_each_block_1(key, child_ctx));
  }
  return {
    key: key_1,
    first: null,
    c() {
      tr = element("tr");
      if (if_block)
        if_block.c();
      t0 = space();
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].c();
      }
      t1 = space();
      this.first = tr;
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      if (if_block)
        if_block.m(tr, null);
      append(tr, t0);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].m(tr, null);
      }
      append(tr, t1);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*showWeekNums*/
        ctx[1]
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*showWeekNums*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(tr, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*month, today, displayedMonth, onClickDay, onContextMenuDay, onHoverDay, getDailyMetadata, sources, selectedId*/
      18261) {
        each_value_1 = /*week*/
        ctx[18].days;
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, tr, outro_and_destroy_block, create_each_block_1, t1, get_each_context_1);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      for (let i3 = 0; i3 < each_value_1.length; i3 += 1) {
        transition_in(each_blocks[i3]);
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        transition_out(each_blocks[i3]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      if (if_block)
        if_block.d();
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].d();
      }
    }
  };
}
function create_fragment(ctx) {
  let div;
  let nav;
  let t0;
  let table;
  let colgroup;
  let t1;
  let t22;
  let thead;
  let tr;
  let t3;
  let t4;
  let tbody;
  let each_blocks = [];
  let each2_lookup = /* @__PURE__ */ new Map();
  let current;
  nav = new Nav({
    props: {
      today: (
        /*today*/
        ctx[10]
      ),
      displayedMonth: (
        /*displayedMonth*/
        ctx[0]
      ),
      incrementDisplayedMonth: (
        /*incrementDisplayedMonth*/
        ctx[11]
      ),
      decrementDisplayedMonth: (
        /*decrementDisplayedMonth*/
        ctx[12]
      ),
      resetDisplayedMonth: (
        /*resetDisplayedMonth*/
        ctx[13]
      )
    }
  });
  let if_block0 = (
    /*showWeekNums*/
    ctx[1] && create_if_block_2()
  );
  let each_value_3 = (
    /*month*/
    ctx[14][1].days
  );
  let each_blocks_2 = [];
  for (let i3 = 0; i3 < each_value_3.length; i3 += 1) {
    each_blocks_2[i3] = create_each_block_3(get_each_context_3(ctx, each_value_3, i3));
  }
  let if_block1 = (
    /*showWeekNums*/
    ctx[1] && create_if_block_1()
  );
  let each_value_2 = (
    /*daysOfWeek*/
    ctx[15]
  );
  let each_blocks_1 = [];
  for (let i3 = 0; i3 < each_value_2.length; i3 += 1) {
    each_blocks_1[i3] = create_each_block_2(get_each_context_2(ctx, each_value_2, i3));
  }
  let each_value = (
    /*month*/
    ctx[14]
  );
  const get_key = (ctx2) => (
    /*week*/
    ctx2[18].weekNum
  );
  for (let i3 = 0; i3 < each_value.length; i3 += 1) {
    let child_ctx = get_each_context(ctx, each_value, i3);
    let key = get_key(child_ctx);
    each2_lookup.set(key, each_blocks[i3] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      create_component(nav.$$.fragment);
      t0 = space();
      table = element("table");
      colgroup = element("colgroup");
      if (if_block0)
        if_block0.c();
      t1 = space();
      for (let i3 = 0; i3 < each_blocks_2.length; i3 += 1) {
        each_blocks_2[i3].c();
      }
      t22 = space();
      thead = element("thead");
      tr = element("tr");
      if (if_block1)
        if_block1.c();
      t3 = space();
      for (let i3 = 0; i3 < each_blocks_1.length; i3 += 1) {
        each_blocks_1[i3].c();
      }
      t4 = space();
      tbody = element("tbody");
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].c();
      }
      attr(table, "class", "calendar svelte-pcimu8");
      attr(div, "id", "calendar-container");
      attr(div, "class", "container svelte-pcimu8");
      toggle_class(
        div,
        "is-mobile",
        /*isMobile*/
        ctx[16]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(nav, div, null);
      append(div, t0);
      append(div, table);
      append(table, colgroup);
      if (if_block0)
        if_block0.m(colgroup, null);
      append(colgroup, t1);
      for (let i3 = 0; i3 < each_blocks_2.length; i3 += 1) {
        each_blocks_2[i3].m(colgroup, null);
      }
      append(table, t22);
      append(table, thead);
      append(thead, tr);
      if (if_block1)
        if_block1.m(tr, null);
      append(tr, t3);
      for (let i3 = 0; i3 < each_blocks_1.length; i3 += 1) {
        each_blocks_1[i3].m(tr, null);
      }
      append(table, t4);
      append(table, tbody);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].m(tbody, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      const nav_changes = {};
      if (dirty & /*today*/
      1024)
        nav_changes.today = /*today*/
        ctx2[10];
      if (dirty & /*displayedMonth*/
      1)
        nav_changes.displayedMonth = /*displayedMonth*/
        ctx2[0];
      nav.$set(nav_changes);
      if (
        /*showWeekNums*/
        ctx2[1]
      ) {
        if (if_block0)
          ;
        else {
          if_block0 = create_if_block_2();
          if_block0.c();
          if_block0.m(colgroup, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*isWeekend, month*/
      16384) {
        each_value_3 = /*month*/
        ctx2[14][1].days;
        let i3;
        for (i3 = 0; i3 < each_value_3.length; i3 += 1) {
          const child_ctx = get_each_context_3(ctx2, each_value_3, i3);
          if (each_blocks_2[i3]) {
            each_blocks_2[i3].p(child_ctx, dirty);
          } else {
            each_blocks_2[i3] = create_each_block_3(child_ctx);
            each_blocks_2[i3].c();
            each_blocks_2[i3].m(colgroup, null);
          }
        }
        for (; i3 < each_blocks_2.length; i3 += 1) {
          each_blocks_2[i3].d(1);
        }
        each_blocks_2.length = each_value_3.length;
      }
      if (
        /*showWeekNums*/
        ctx2[1]
      ) {
        if (if_block1)
          ;
        else {
          if_block1 = create_if_block_1();
          if_block1.c();
          if_block1.m(tr, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*daysOfWeek*/
      32768) {
        each_value_2 = /*daysOfWeek*/
        ctx2[15];
        let i3;
        for (i3 = 0; i3 < each_value_2.length; i3 += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i3);
          if (each_blocks_1[i3]) {
            each_blocks_1[i3].p(child_ctx, dirty);
          } else {
            each_blocks_1[i3] = create_each_block_2(child_ctx);
            each_blocks_1[i3].c();
            each_blocks_1[i3].m(tr, null);
          }
        }
        for (; i3 < each_blocks_1.length; i3 += 1) {
          each_blocks_1[i3].d(1);
        }
        each_blocks_1.length = each_value_2.length;
      }
      if (dirty & /*month, today, displayedMonth, onClickDay, onContextMenuDay, onHoverDay, getDailyMetadata, sources, selectedId, getWeeklyMetadata, onClickWeek, onContextMenuWeek, onHoverWeek, showWeekNums*/
      18431) {
        each_value = /*month*/
        ctx2[14];
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each2_lookup, tbody, outro_and_destroy_block, create_each_block, null, get_each_context);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(nav.$$.fragment, local);
      for (let i3 = 0; i3 < each_value.length; i3 += 1) {
        transition_in(each_blocks[i3]);
      }
      current = true;
    },
    o(local) {
      transition_out(nav.$$.fragment, local);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        transition_out(each_blocks[i3]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(nav);
      if (if_block0)
        if_block0.d();
      destroy_each(each_blocks_2, detaching);
      if (if_block1)
        if_block1.d();
      destroy_each(each_blocks_1, detaching);
      for (let i3 = 0; i3 < each_blocks.length; i3 += 1) {
        each_blocks[i3].d();
      }
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { localeData } = $$props;
  let { showWeekNums = false } = $$props;
  let { onHoverDay } = $$props;
  let { onHoverWeek } = $$props;
  let { onContextMenuDay } = $$props;
  let { onContextMenuWeek } = $$props;
  let { onClickDay } = $$props;
  let { onClickWeek } = $$props;
  let { sources = [] } = $$props;
  let { selectedId } = $$props;
  let { today = window.moment() } = $$props;
  let { displayedMonth = today } = $$props;
  let month;
  let daysOfWeek;
  let isMobile = window.app.isMobile;
  function incrementDisplayedMonth() {
    $$invalidate(0, displayedMonth = displayedMonth.clone().add(1, "month"));
  }
  function decrementDisplayedMonth() {
    $$invalidate(0, displayedMonth = displayedMonth.clone().subtract(1, "month"));
  }
  function resetDisplayedMonth() {
    $$invalidate(0, displayedMonth = today.clone());
  }
  $$self.$$set = ($$props2) => {
    if ("localeData" in $$props2)
      $$invalidate(17, localeData = $$props2.localeData);
    if ("showWeekNums" in $$props2)
      $$invalidate(1, showWeekNums = $$props2.showWeekNums);
    if ("onHoverDay" in $$props2)
      $$invalidate(2, onHoverDay = $$props2.onHoverDay);
    if ("onHoverWeek" in $$props2)
      $$invalidate(3, onHoverWeek = $$props2.onHoverWeek);
    if ("onContextMenuDay" in $$props2)
      $$invalidate(4, onContextMenuDay = $$props2.onContextMenuDay);
    if ("onContextMenuWeek" in $$props2)
      $$invalidate(5, onContextMenuWeek = $$props2.onContextMenuWeek);
    if ("onClickDay" in $$props2)
      $$invalidate(6, onClickDay = $$props2.onClickDay);
    if ("onClickWeek" in $$props2)
      $$invalidate(7, onClickWeek = $$props2.onClickWeek);
    if ("sources" in $$props2)
      $$invalidate(8, sources = $$props2.sources);
    if ("selectedId" in $$props2)
      $$invalidate(9, selectedId = $$props2.selectedId);
    if ("today" in $$props2)
      $$invalidate(10, today = $$props2.today);
    if ("displayedMonth" in $$props2)
      $$invalidate(0, displayedMonth = $$props2.displayedMonth);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*displayedMonth, localeData*/
    131073) {
      $$invalidate(14, month = getMonth(displayedMonth, localeData));
    }
    if ($$self.$$.dirty & /*today, localeData*/
    132096) {
      $$invalidate(15, daysOfWeek = getDaysOfWeek(today, localeData));
    }
  };
  return [
    displayedMonth,
    showWeekNums,
    onHoverDay,
    onHoverWeek,
    onContextMenuDay,
    onContextMenuWeek,
    onClickDay,
    onClickWeek,
    sources,
    selectedId,
    today,
    incrementDisplayedMonth,
    decrementDisplayedMonth,
    resetDisplayedMonth,
    month,
    daysOfWeek,
    isMobile,
    localeData
  ];
}
var Calendar = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-pcimu8-style"))
      add_css();
    init(this, options, instance, create_fragment, not_equal, {
      localeData: 17,
      showWeekNums: 1,
      onHoverDay: 2,
      onHoverWeek: 3,
      onContextMenuDay: 4,
      onContextMenuWeek: 5,
      onClickDay: 6,
      onClickWeek: 7,
      sources: 8,
      selectedId: 9,
      today: 10,
      displayedMonth: 0,
      incrementDisplayedMonth: 11,
      decrementDisplayedMonth: 12,
      resetDisplayedMonth: 13
    });
  }
  get incrementDisplayedMonth() {
    return this.$$.ctx[11];
  }
  get decrementDisplayedMonth() {
    return this.$$.ctx[12];
  }
  get resetDisplayedMonth() {
    return this.$$.ctx[13];
  }
};

// node_modules/.pnpm/preact@10.13.2/node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
var _3 = 0;
function o3(o4, e3, n2, t3, f3, l3) {
  var s2, u3, a3 = {};
  for (u3 in e3)
    "ref" == u3 ? s2 = e3[u3] : a3[u3] = e3[u3];
  var i3 = { type: o4, props: a3, key: n2, ref: s2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: --_3, __source: f3, __self: l3 };
  if ("function" == typeof o4 && (s2 = o4.defaultProps))
    for (u3 in s2)
      void 0 === a3[u3] && (a3[u3] = s2[u3]);
  return l.vnode && l.vnode(i3), i3;
}

// src/components/Calendar/Calendar.tsx
function Calendar2() {
  const elRef = _2(null);
  p2(() => {
    if (!elRef.current)
      return;
    const cal = new Calendar({
      target: elRef.current,
      props: {
        // Settings
        showWeekNums: false
      }
    });
    return () => cal.$destroy();
  }, []);
  return /* @__PURE__ */ o3("div", { ref: elRef });
}

// src/components/App/App.tsx
function JournalViewApp() {
  return /* @__PURE__ */ o3("div", { children: [
    "Hello World",
    /* @__PURE__ */ o3(Calendar2, {})
  ] });
}

// src/views/journal-view.tsx
var VIEW_TYPE_JOURNAL = "journal-view";
var JournalView = class extends import_obsidian2.ItemView {
  getViewType() {
    return VIEW_TYPE_JOURNAL;
  }
  getDisplayText() {
    return "Journal view";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    B(/* @__PURE__ */ o3(JournalViewApp, {}), container);
  }
  async onClose() {
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_JOURNAL, (leaf) => new JournalView(leaf));
    this.addRibbonIcon("dice", "Activate view", () => {
      this.activateView();
    });
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_JOURNAL);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_JOURNAL);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE_JOURNAL,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(VIEW_TYPE_JOURNAL)[0]
    );
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
